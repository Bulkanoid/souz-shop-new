// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String         @id @default(uuid())
  email         String?        @unique
  phone         String?        @unique
  avatar        String?
  role          String // 'admin', 'customer'
  passwordHash  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  cart          Cart?
  orders        Order[]
  favorites     Favorite[]
  authProviders AuthProvider[]
}

model AuthProvider {
  id       String   @id @default(uuid())
  userId   String   @unique
  provider String // 'google', 'email', 'sms'
  user     Customer @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// schema.prisma

model Product {
  id             String          @id @default(uuid())
  categoryId     String
  name_ru        String
  name_en        String
  description_ru String?
  description_en String?
  brandId        String?
  price          Decimal
  size           Json?
  weight         Int?
  density        Int? //Плотность
  survivability  Int? //Живучесть
  images         Json
  files          Json
  labels         Labels[] /// Хиты распродажа...
  design         Design[] /// Дизайн ткани Однотон...
  property       Property[] // Свойства Обработка, прописка и тд
  care           Care[]
  type           Type?
  manufacturer   String?
  excelName      String? // Название из Excel-файла
  stock          Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  // Связи
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  brand          Brand?          @relation(fields: [brandId], references: [id])
  stockUpdates   StockUpdate[]
  Favorite       Favorite[]
  // Новое: связанные варианты ткани (если продукт является тканью)
  fabricVariants FabricVariant[]
}

model Care {
  id             String   @id @default(uuid())
  name_ru        String
  name_en        String
  description_ru String?
  description_en String?
  Product        Product? @relation(fields: [productId], references: [id])
  productId      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Property {
  id             String   @id @default(uuid())
  name_ru        String
  name_en        String
  description_ru String?
  description_en String?
  Product        Product? @relation(fields: [productId], references: [id])
  productId      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Type {
  id        String   @id @default(uuid())
  name_ru   String
  name_en   String
  productId String   @unique
  product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Design {
  id        String   @id @default(uuid())
  name_ru   String
  name_en   String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Labels {
  id        String   @id @default(uuid())
  name_ru   String
  name_en   String
  image     String?
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FabricVariant {
  id        String @id @default(uuid())
  productId String
  // Дополнительные поля для варианта ткани
  name      String // Название варианта
  color     String // Цвет
  images    Json // Картинки для варианта (например, массив URL-ов)
  // При необходимости можно добавить и другие поля, например, размеры или дополнительные свойства

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id             String    @id @default(uuid())
  name_ru        String
  name_en        String
  description_ru String?
  description_en String?
  image          String[]
  parentId       String?
  sortOrder      Int?
  products       Product[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Brand {
  id             String    @id @default(uuid())
  name_ru        String
  name_en        String
  description_ru String?
  description_en String?
  image          String?
  products       Product[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Остальные модели оставляем без изменений...

model StockUpdate {
  id        String               @id @default(uuid())
  productId String               @unique
  excelName String?
  quantity  Int
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  history   StockUpdateHistory[]
}

model StockUpdateHistory {
  id               String      @id @default(uuid())
  stockUpdateId    String
  previousQuantity Int
  newQuantity      Int
  updatedAt        DateTime    @default(now())
  updatedBy        String
  stockUpdate      StockUpdate @relation(fields: [stockUpdateId], references: [id], onDelete: Cascade)
}

model Order {
  id            String    @id @default(uuid())
  userId        String?
  status        String // 'pending', 'paid', 'shipped', 'cancelled'
  items         Json
  totalPrice    Decimal
  paymentMethod String // 'card', 'cash', 'paypal'
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          Customer? @relation(fields: [userId], references: [id])
}

model Cart {
  id        String    @id @default(uuid())
  userId    String?   @unique
  sessionId String?   @unique
  items     Json
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      Customer? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String    @id @default(uuid())
  userId    String?
  productId String
  user      Customer? @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
